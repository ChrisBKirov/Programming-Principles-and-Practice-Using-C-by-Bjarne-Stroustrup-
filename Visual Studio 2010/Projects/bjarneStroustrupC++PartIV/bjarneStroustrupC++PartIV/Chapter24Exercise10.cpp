/*
	TITLE		   Plot rand() distribution             Chapter24Exercise10.cpp
	COMMENT
		Objective: How random is your rand()? 
				   Write a program that takes two integers n and d as
				   inputs and calls randint(n) d times, recording the result. 
				   Output the number of draws for each of [0: n) and "eyeball" 
				   how similar tile counts are. 
				   Try with low values for n and with low values for d to see if
				   drawing only a few random numbers causes obvious biases. 

				   Gnuplot script (located in \Documents) plots .txt files 
				   generated by the following code.
			Input: - 
		   Output: -
		   Author: Chris B. Kirov
			 Date: 08.05.2017
*/
#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>

//-------------------------------------------------------------------------------

int randint(int n)
{
	return rand() % n;
}

//-------------------------------------------------------------------------------

std::vector<int> analyse_rand(int n, int d)
{
	std::vector<int> data(n, 0);

	for (auto i = 0; i < d; ++i)
	{
		data[randint(n)] += 1;
	}

	return data;
}

//-------------------------------------------------------------------------------

void write_to_file(std::vector<int>& data, int n, int d)
{
	std::stringstream ss;
	ss <<"Chapter24Exercise10n"<< n << "d" << d <<".txt";

	std::ofstream ofs(ss.str().c_str());
	if (!ofs)
	{
		throw std::runtime_error("write_to_file::Can't open output file!\n");
	}

	ofs <<"Value:\tFrequency:\n";
	for (auto i = 0; i < data.size(); ++i)
	{
		ofs << i <<"\t"<< data[i] <<'\n';
	}
}

//-------------------------------------------------------------------------------

void run_test()
{
	int initial = 10;
	int step = 10;
	int maxSample = 100;
	int maxObservations = 10000;

	for (int sample = initial; sample <= maxSample; sample *= step)
	{
		for (int observations = sample; observations <= maxObservations; observations *= step)
		{
			std::vector<int> data = analyse_rand(sample, observations);
			write_to_file(data, sample, observations);
		}
	}
}

//-------------------------------------------------------------------------------
 
int main()
{
	try
	{
		run_test();	 
	}
	catch(std::runtime_error& r)
	{
		std::cerr <<"Runtime error::"<< r.what();
		getchar();
		exit(1);
	}
	getchar();
}