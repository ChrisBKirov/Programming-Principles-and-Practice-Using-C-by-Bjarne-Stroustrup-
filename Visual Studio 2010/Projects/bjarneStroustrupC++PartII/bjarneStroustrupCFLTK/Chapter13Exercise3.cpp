/*
	TITLE		   Arrow					      Chapter13Exercise3.cpp
	"Bjarne Stroustrup "Programming Principles and Practices Using C++""
	COMMENT
		Objective: Define a class Arrow which draws
		           a line with an arrow head.
		   Output: 
		   Author: 15.09.2015
		     Date: Chris B. Kirov
*/

#include "GUI.h"
#include "Simple_window.h"
#include <iostream>

#define PI 3.14159265359
//-----------------------------------------------------------------------------------------------------------------------

// class Arrow
class Arrow: public Lines
{
public:
	Arrow(Point p1, Point p2, int arr);

private:
	Point rotate_point(Point pivot, float angle, Point p); 
	int arrowSize;
};

Arrow::Arrow(Point p1, Point p2, int arr)
	: arrowSize(arr)
{
	Shape::add(p1);
	Shape::add(p2);
	// The arrow head is generated by rotating a point on the line around the second(end) point
	// of the line in at the same angle in both directions, then using these points to generate lines
	// norm of the vector p1p2
	int x = abs(p2.x - p1.x);
	int y = abs(p2.y - p1.y);
	double norm = sqrt(double(x*x + y*y));
	// unit vector along the vector p1p2; 
	// multiplied be the wanted size of the arrow so that the division by the norm is > 1
	Point unitVector(double(x*arrowSize) / double(norm), double(y*arrowSize)/double(norm));
	// rotate a point on the line located just before p2, 30 degrees in both directions around p2
	Point arrow1;
	Point arrow2;
	// cover all the possible slopes
	if (double(p2.y - p1.y) >= 0 && double(p2.x - p1.x) >= 0)
	{
		arrow1 = rotate_point(p2, 30, Point(p2.x - unitVector.x, p2.y - unitVector.y));
		arrow2 = rotate_point(p2, 330, Point(p2.x - unitVector.x, p2.y - unitVector.y));
	}
	else if (double(p2.y - p1.y) >= 0 && double(p2.x - p1.x) < 0)
	{
		arrow1 = rotate_point(p2, 30, Point(p2.x + unitVector.x, p2.y - unitVector.y));
		arrow2 = rotate_point(p2, 330, Point(p2.x + unitVector.x, p2.y - unitVector.y));
	}
	else if (double(p2.y - p1.y) < 0 && double(p2.x - p1.x) < 0)
	{
		arrow1 = rotate_point(p2, 30, Point(p2.x + unitVector.x, p2.y + unitVector.y));
		arrow2 = rotate_point(p2, 330, Point(p2.x + unitVector.x, p2.y + unitVector.y));
	}
	else if (double(p2.y - p1.y) < 0 && double(p2.x - p1.x) >= 0)
	{
		arrow1 = rotate_point(p2, 30, Point(p2.x - unitVector.x, p2.y + unitVector.y));
		arrow2 = rotate_point(p2, 330, Point(p2.x - unitVector.x, p2.y + unitVector.y));
	}
	// generate first part of the arrow
	Shape::add(p2);
	Shape::add(arrow1);
	// generate second part of the arrow
	Shape::add(p2); 
	Shape::add(arrow2); 
}

Point Arrow::rotate_point(Point pivot, float angle, Point p)
{
	 float angleRad = angle * PI / 180.;
     return Point(cos(angleRad ) * (p.x - pivot.x) - sin(angleRad ) * (p.y - pivot.y) + pivot.x,
                  sin(angleRad ) * (p.x - pivot.x) + cos(angleRad ) * (p.y - pivot.y) + pivot.y);
}

//-----------------------------------------------------------------------------------------------------------------------

int main()
{
	 // window parameters
	 int winWidth = 800;
	 int winHeight = 600;
	 Point center((x_max() - winWidth) / 2., (y_max() - winHeight) / 2.);
	 Simple_window* sw = new Simple_window(center, winWidth, winHeight, "Chapter 13 Exercise 3");

	 try
	 {
	     // Create arrows in every direction of the 2D plane in different colours
		 Arrow ar1(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2,sw->y_max()/2 - 100), 6);
		 ar1.set_color(Color::red);
		 sw->attach(ar1);

		 Arrow ar2(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2,sw->y_max()/2 + 100), 6);
		 ar2.set_color(Color::blue);
		 sw->attach(ar2);

		 Arrow ar3(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 - 100,sw->y_max()/2 ), 6);
		 ar3.set_color(Color::green);
		 sw->attach(ar3);

		 Arrow ar4(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 + 100,sw->y_max()/2 ), 6);
		 ar4.set_color(Color::cyan);
		 sw->attach(ar4);
		
		 Arrow ar5(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 + 100,sw->y_max()/2 + 45), 6);
		 ar5.set_color(Color::dark_magenta);
		 sw->attach(ar5);

		 Arrow ar6(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 + 100,sw->y_max()/2 - 45), 6);
		 ar6.set_color(Color::dark_yellow);
		 sw->attach(ar6);

		 Arrow ar7(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 - 100,sw->y_max()/2 + 45), 6);
		 ar7.set_color(Color::dark_green);
		 sw->attach(ar7);

		 Arrow ar8(Point(sw->x_max()/2, sw->y_max()/2), Point(sw->x_max()/2 - 100,sw->y_max()/2 - 45), 6);
		 sw->attach(ar8);

		 Arrow ar9(Point(50, 50), Point(sw->x_max()/2,sw->y_max()/2), 20);
		 ar9.set_color(Color::yellow);
		 sw->attach(ar9);

		 sw->wait_for_button();
	 }
	 catch(std::exception& e)
	 {
		std::cerr << e.what() << std::endl;
	 }
	 catch(...)
	 {
		std::cerr <<"Default exception!"<< std::endl;
	 }
}